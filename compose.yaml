version: '3'

services:
  mongo-security-devices:
    image: mongo:7.0.2
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data
      - ./init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=mongo-db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 1s
      retries: 5

  nats-security-devices:
    image: nats:2.9.23
    ports:
      - "4222:4222"
    healthcheck:
      test: ["CMD", "nats", "ping"]
      interval: 1s
      timeout: 1s
      retries: 5

  redis-security-devices:
    image: redis:alpine3.18
    ports:
      - "6379:6379"

  kafka-security-devices:
    image: confluentinc/cp-kafka:7.5.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: INTERNAL://kafka-security-devices:29092, EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-security-devices:29092, EXTERNAL://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-security-devices:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, EXTERNAL:PLAINTEXT
    depends_on:
      - zookeeper-security-devices
    volumes:
      - kafka-data:/var/lib/kafka/data

  zookeeper-security-devices:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log

  schema-registry-security-devices:
    image: confluentinc/cp-schema-registry:7.5.1
    ports:
      - "8081:8081"
    depends_on:
      - kafka-security-devices
      - zookeeper-security-devices
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-security-devices:29092

  security-devices-app-1:
    build:
      context: .
    ports:
      - "8080:8080"
      - "9090:9091"
    depends_on:
      nats-security-devices:
        condition: service_started
      redis-security-devices:
        condition: service_started
      mongo-security-devices:
        condition: service_healthy
      kafka-security-devices:
        condition: service_started
      schema-registry-security-devices:
        condition: service_started

  security-devices-app-2:
    build:
      context: .
    ports:
      - "8082:8080"
      - "9091:9091"
    depends_on:
      nats-security-devices:
        condition: service_started
      redis-security-devices:
        condition: service_started
      mongo-security-devices:
        condition: service_healthy
      kafka-security-devices:
        condition: service_started
      schema-registry-security-devices:
        condition: service_started

volumes:
  mongo-data:
  kafka-data:
  zookeeper-data:
  zookeeper-log:
